class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if len(grid) == 0 or len(grid[0]) == 0:
            return 0
        m, n = len(grid), len(grid[0])

        def next_pos(pos):
            nexts = []
            i, j = pos
            dirs = [(-1, 0), (1, 0), (0, 1), (0, -1)]
            for dir in dirs:
                x, y = i + dir[0], j + dir[1]
                if 0 <= x < m and 0 <= y < n and grid[x][y] == "1":
                    nexts.append((x, y))
            return nexts

        def bfs(start):
            poss = []
            queue = [start]
            while queue:
                crt = queue.pop(0)
                poss.append(crt)
                i, j = crt
                grid[i][j] = '-'
                queue.extend(next_pos(crt))
            return poss

        def dfs(start):
            i, j = start
            grid[i][j] = "-"
            for n in next_pos(start):
                dfs(n)
            return

        islands = []
        count = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == "1":
                    islands.append((i, j))
                    count += 1
                    dfs((i,j))

        print(count)
        return count

g = [["1","1","1","1",0], ["1","1",0,"1",0], ["1","1",0,0,0],[0,0,0,0,0]]
s = Solution()
s.numIslands(g)
g2 = [["1","1",0,0,0],["1","1",0,0,0],[0,0,"1",0,0],[0,0,0,"1","1"]]
s.numIslands(g2)

g3 = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
s.numIslands(g3)